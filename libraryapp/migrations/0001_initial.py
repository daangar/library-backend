# Generated by Django 5.2.4 on 2025-08-03 07:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def create_initial_data(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    DjangoBook = apps.get_model('libraryapp', 'DjangoBook')
    DjangoLoan = apps.get_model('libraryapp', 'DjangoLoan')
    
    students_group, _ = Group.objects.get_or_create(name='Students')
    librarians_group, _ = Group.objects.get_or_create(name='Librarians')
    
    book_content_type = ContentType.objects.get_for_model(DjangoBook)
    loan_content_type = ContentType.objects.get_for_model(DjangoLoan)
    user_content_type = ContentType.objects.get_for_model(User)
    view_book_perm, _ = Permission.objects.get_or_create(
        codename='view_book',
        name='Can view book',
        content_type=book_content_type,
    )
    add_book_perm, _ = Permission.objects.get_or_create(
        codename='add_book',
        name='Can add book',
        content_type=book_content_type,
    )
    change_book_perm, _ = Permission.objects.get_or_create(
        codename='change_book',
        name='Can change book',
        content_type=book_content_type,
    )
    delete_book_perm, _ = Permission.objects.get_or_create(
        codename='delete_book',
        name='Can delete book',
        content_type=book_content_type,
    )

    view_loan_perm, _ = Permission.objects.get_or_create(
        codename='view_loan',
        name='Can view loan',
        content_type=loan_content_type,
    )
    add_loan_perm, _ = Permission.objects.get_or_create(
        codename='add_loan',
        name='Can add loan',
        content_type=loan_content_type,
    )
    change_loan_perm, _ = Permission.objects.get_or_create(
        codename='change_loan',
        name='Can change loan',
        content_type=loan_content_type,
    )
    delete_loan_perm, _ = Permission.objects.get_or_create(
        codename='delete_loan',
        name='Can delete loan',
        content_type=loan_content_type,
    )

    view_user_perm, _ = Permission.objects.get_or_create(
        codename='view_user',
        name='Can view user',
        content_type=user_content_type,
    )
    add_user_perm, _ = Permission.objects.get_or_create(
        codename='add_user',
        name='Can add user',
        content_type=user_content_type,
    )
    change_user_perm, _ = Permission.objects.get_or_create(
        codename='change_user',
        name='Can change user',
        content_type=user_content_type,
    )
    delete_user_perm, _ = Permission.objects.get_or_create(
        codename='delete_user',
        name='Can delete user',
        content_type=user_content_type,
    )
    
    students_group.permissions.set([
        view_book_perm,
        add_loan_perm,
        view_loan_perm,
    ])
    
    librarians_group.permissions.set([
        view_book_perm,
        add_book_perm,
        change_book_perm,
        delete_book_perm,
        view_loan_perm,
        add_loan_perm,
        change_loan_perm,
        delete_loan_perm,
        view_user_perm,
        add_user_perm,
        change_user_perm,
        delete_user_perm,
    ])
    admin_user = User.objects.create_user(
        username='admin',
        email='admin@library.com',
        password='Password!!',
        first_name='Admin',
        last_name='Librarian',
        is_staff=True,
        is_superuser=True
    )
    admin_user.groups.add(librarians_group)

    student1 = User.objects.create_user(
        username='estudiante1',
        email='estudiante1@university.com',
        password='PasswordE1!!',
        first_name='Juan Carlos',
        last_name='Pérez García'
    )
    student1.groups.add(students_group)

    student2 = User.objects.create_user(
        username='estudiante2',
        email='estudiante2@university.com',
        password='PasswordE2!!',
        first_name='María Elena',
        last_name='López Martínez'
    )
    student2.groups.add(students_group)

    books_data = [
        {
            'title': 'Cien años de soledad',
            'author_name': 'Gabriel García Márquez',
            'genre_name': 'Realismo mágico',
            'published_year': 1967,
            'stock': 5
        },
        {
            'title': 'Don Quijote de la Mancha',
            'author_name': 'Miguel de Cervantes',
            'genre_name': 'Novela clásica',
            'published_year': 1605,
            'stock': 3
        },
        {
            'title': '1984',
            'author_name': 'George Orwell',
            'genre_name': 'Distopía',
            'published_year': 1949,
            'stock': 4
        },
        {
            'title': 'El principito',
            'author_name': 'Antoine de Saint-Exupéry',
            'genre_name': 'Literatura infantil',
            'published_year': 1943,
            'stock': 6
        },
        {
            'title': 'Rayuela',
            'author_name': 'Julio Cortázar',
            'genre_name': 'Literatura experimental',
            'published_year': 1963,
            'stock': 2
        },
        {
            'title': 'La sombra del viento',
            'author_name': 'Carlos Ruiz Zafón',
            'genre_name': 'Novela gótica',
            'published_year': 2001,
            'stock': 4
        },
        {
            'title': 'Fundación',
            'author_name': 'Isaac Asimov',
            'genre_name': 'Ciencia ficción',
            'published_year': 1951,
            'stock': 3
        },
        {
            'title': 'Orgullo y prejuicio',
            'author_name': 'Jane Austen',
            'genre_name': 'Romance clásico',
            'published_year': 1813,
            'stock': 2
        }
    ]
    
    for book_data in books_data:
        DjangoBook.objects.create(**book_data)


def remove_initial_data(apps, schema_editor):
    """Eliminar datos iniciales (reversa)"""
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    DjangoBook = apps.get_model('libraryapp', 'DjangoBook')
    
    # Eliminar usuarios creados
    User.objects.filter(username__in=['admin', 'estudiante1', 'estudiante2']).delete()
    
    # Limpiar permisos de grupos (pero mantener los grupos)
    try:
        students_group = Group.objects.get(name='Students')
        librarians_group = Group.objects.get(name='Librarians')
        students_group.permissions.clear()
        librarians_group.permissions.clear()
    except Group.DoesNotExist:
        pass
    
    # Eliminar libros (opcional - comentado para preservar datos)
    # DjangoBook.objects.all().delete()
    
    # Eliminar grupos (opcional - comentado para preservar estructura)
    # Group.objects.filter(name__in=['Students', 'Librarians']).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DjangoBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("author_name", models.CharField(max_length=200)),
                ("published_year", models.PositiveIntegerField()),
                ("genre_name", models.CharField(max_length=100)),
                ("stock", models.PositiveIntegerField(default=0)),
            ],
            options={
                "db_table": "libraryapp_book",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="DjangoLoan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("borrowed_at", models.DateTimeField(auto_now_add=True)),
                ("returned_at", models.DateTimeField(blank=True, null=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="libraryapp.djangobook",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "libraryapp_loan",
                "ordering": ["-borrowed_at"],
            },
        ),
        
        # Crear datos iniciales
        migrations.RunPython(create_initial_data, remove_initial_data),
    ]
